(self.webpackChunkreact_demo_app=self.webpackChunkreact_demo_app||[]).push([[125],{"./src/stories/Auth/Login.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{EmptyForm:()=>EmptyForm,SuccessfulLogin:()=>SuccessfulLogin,UnsuccessfulLogin:()=>UnsuccessfulLogin,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Login_stories});__webpack_require__("./node_modules/react/index.js");var dist=__webpack_require__("./node_modules/@storybook/testing-library/dist/index.mjs"),jest_dist=__webpack_require__("./node_modules/@storybook/jest/dist/index.mjs"),es_form=__webpack_require__("./node_modules/antd/es/form/index.js"),input=__webpack_require__("./node_modules/antd/es/input/index.js"),es_button=__webpack_require__("./node_modules/antd/es/button/index.js"),sweetalert2_all=__webpack_require__("./node_modules/sweetalert2/dist/sweetalert2.all.js"),sweetalert2_all_default=__webpack_require__.n(sweetalert2_all),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const Login_Login=_ref=>{let{onLoginSuccess}=_ref;const[form]=es_form.A.useForm();return(0,jsx_runtime.jsx)("div",{className:"auth-container",children:(0,jsx_runtime.jsxs)("div",{className:"auth-box",children:[(0,jsx_runtime.jsx)("h2",{children:"Login"}),(0,jsx_runtime.jsxs)(es_form.A,{form,onFinish:values=>{const user=(JSON.parse(localStorage.getItem("users"))||[]).find((user=>user.email===values.email&&user.password===values.password));user?(localStorage.setItem("loggedInUser",JSON.stringify(user)),sweetalert2_all_default().fire("Success","Login successful!","success").then((()=>{onLoginSuccess&&onLoginSuccess()}))):sweetalert2_all_default().fire("Error","Invalid credentials","error")},layout:"vertical",children:[(0,jsx_runtime.jsx)(es_form.A.Item,{label:"Email",name:"email",rules:[{required:!0,message:"Please input your email!"}],children:(0,jsx_runtime.jsx)(input.A,{})}),(0,jsx_runtime.jsx)(es_form.A.Item,{label:"Password",name:"password",rules:[{required:!0,message:"Please input your password!"}],children:(0,jsx_runtime.jsx)(input.A.Password,{})}),(0,jsx_runtime.jsx)(es_button.Ay,{type:"primary",htmlType:"submit",children:"Login"}),(0,jsx_runtime.jsx)("div",{className:"extra-links",children:(0,jsx_runtime.jsx)("a",{href:"/register",children:"Register"})})]})]})})},Auth_Login=Login_Login;Login_Login.__docgenInfo={description:"",methods:[],displayName:"Login"};const Login_stories={component:Auth_Login,title:"Auth/Login"},EmptyForm={},SuccessfulLogin={play:async _ref=>{let{canvasElement}=_ref;const canvas=(0,dist.ux)(canvasElement);window.Swal={fire:async(title,text,icon)=>(console.log("Swal.fire called with:",{title,text,icon}),Promise.resolve({title,text,icon}))};const mockLocalStorage={storage:{},getItem(key){return this.storage[key]||null},setItem(key,value){this.storage[key]=value},removeItem(key){delete this.storage[key]},clear(){this.storage={}}},originalLocalStorage=window.localStorage;Object.defineProperty(window,"localStorage",{value:mockLocalStorage,writable:!0}),mockLocalStorage.setItem("users",JSON.stringify([{email:"email@provider.com",password:"a-random-password"}])),await dist.Q4.type(canvas.getByLabelText(/email/i),"email@provider.com"),await dist.Q4.type(canvas.getByLabelText(/password/i),"a-random-password"),await dist.Q4.click(canvas.getByRole("button",{name:/login/i})),await(0,jest_dist.E)(window.Swal.fire).toHaveBeenCalledWith("Success","Login successful!","success"),Object.defineProperty(window,"localStorage",{value:originalLocalStorage,writable:!0})}},UnsuccessfulLogin={play:async _ref2=>{let{canvasElement}=_ref2;const canvas=(0,dist.ux)(canvasElement);window.Swal={fire:async(title,text,icon)=>(console.log("Swal.fire called with:",{title,text,icon}),Promise.resolve({title,text,icon}))};const mockLocalStorage={storage:{},getItem(key){return this.storage[key]||null},setItem(key,value){this.storage[key]=value},removeItem(key){delete this.storage[key]},clear(){this.storage={}}},originalLocalStorage=window.localStorage;Object.defineProperty(window,"localStorage",{value:mockLocalStorage,writable:!0}),mockLocalStorage.setItem("users",JSON.stringify([{email:"email@provider.com",password:"a-random-password"}])),await dist.Q4.type(canvas.getByLabelText(/email/i),"wrong@example.com"),await dist.Q4.type(canvas.getByLabelText(/password/i),"wrongpassword"),await dist.Q4.click(canvas.getByRole("button",{name:/login/i})),await(0,jest_dist.E)(window.Swal.fire).toHaveBeenCalledWith("Error","Invalid credentials","error"),Object.defineProperty(window,"localStorage",{value:originalLocalStorage,writable:!0})}},__namedExportsOrder=["EmptyForm","SuccessfulLogin","UnsuccessfulLogin"];EmptyForm.parameters={...EmptyForm.parameters,docs:{...EmptyForm.parameters?.docs,source:{originalSource:"{}",...EmptyForm.parameters?.docs?.source}}},SuccessfulLogin.parameters={...SuccessfulLogin.parameters,docs:{...SuccessfulLogin.parameters?.docs,source:{originalSource:"{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Mock Swal.fire globally\n    window.Swal = {\n      fire: async (title, text, icon) => {\n        console.log('Swal.fire called with:', {\n          title,\n          text,\n          icon\n        });\n        return Promise.resolve({\n          title,\n          text,\n          icon\n        });\n      }\n    };\n\n    // Mock localStorage\n    const mockLocalStorage = {\n      storage: {},\n      getItem(key) {\n        return this.storage[key] || null;\n      },\n      setItem(key, value) {\n        this.storage[key] = value;\n      },\n      removeItem(key) {\n        delete this.storage[key];\n      },\n      clear() {\n        this.storage = {};\n      }\n    };\n\n    // Replace global localStorage with mock\n    const originalLocalStorage = window.localStorage;\n    Object.defineProperty(window, 'localStorage', {\n      value: mockLocalStorage,\n      writable: true\n    });\n\n    // Set up mock data\n    mockLocalStorage.setItem('users', JSON.stringify([{\n      email: 'email@provider.com',\n      password: 'a-random-password'\n    }]));\n\n    // Simulate user input\n    await userEvent.type(canvas.getByLabelText(/email/i), 'email@provider.com');\n    await userEvent.type(canvas.getByLabelText(/password/i), 'a-random-password');\n\n    // Submit the form\n    await userEvent.click(canvas.getByRole('button', {\n      name: /login/i\n    }));\n\n    // Assert Swal.fire is called with success message\n    await expect(window.Swal.fire).toHaveBeenCalledWith('Success', 'Login successful!', 'success');\n\n    // Restore original localStorage\n    Object.defineProperty(window, 'localStorage', {\n      value: originalLocalStorage,\n      writable: true\n    });\n  }\n}",...SuccessfulLogin.parameters?.docs?.source}}},UnsuccessfulLogin.parameters={...UnsuccessfulLogin.parameters,docs:{...UnsuccessfulLogin.parameters?.docs,source:{originalSource:"{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Mock Swal.fire globally\n    window.Swal = {\n      fire: async (title, text, icon) => {\n        console.log('Swal.fire called with:', {\n          title,\n          text,\n          icon\n        });\n        return Promise.resolve({\n          title,\n          text,\n          icon\n        });\n      }\n    };\n\n    // Mock localStorage\n    const mockLocalStorage = {\n      storage: {},\n      getItem(key) {\n        return this.storage[key] || null;\n      },\n      setItem(key, value) {\n        this.storage[key] = value;\n      },\n      removeItem(key) {\n        delete this.storage[key];\n      },\n      clear() {\n        this.storage = {};\n      }\n    };\n\n    // Replace global localStorage with mock\n    const originalLocalStorage = window.localStorage;\n    Object.defineProperty(window, 'localStorage', {\n      value: mockLocalStorage,\n      writable: true\n    });\n\n    // Set up mock data\n    mockLocalStorage.setItem('users', JSON.stringify([{\n      email: 'email@provider.com',\n      password: 'a-random-password'\n    }]));\n\n    // Simulate user input with invalid credentials\n    await userEvent.type(canvas.getByLabelText(/email/i), 'wrong@example.com');\n    await userEvent.type(canvas.getByLabelText(/password/i), 'wrongpassword');\n\n    // Submit the form\n    await userEvent.click(canvas.getByRole('button', {\n      name: /login/i\n    }));\n\n    // Assert Swal.fire is called with error message\n    await expect(window.Swal.fire).toHaveBeenCalledWith('Error', 'Invalid credentials', 'error');\n\n    // Restore original localStorage\n    Object.defineProperty(window, 'localStorage', {\n      value: originalLocalStorage,\n      writable: true\n    });\n  }\n}",...UnsuccessfulLogin.parameters?.docs?.source}}}},"?4f7e":()=>{}}]);