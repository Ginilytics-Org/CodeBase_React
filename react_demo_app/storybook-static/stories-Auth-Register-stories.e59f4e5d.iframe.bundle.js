"use strict";(self.webpackChunkreact_demo_app=self.webpackChunkreact_demo_app||[]).push([[545],{"./src/stories/Auth/Register.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{EmptyForm:()=>EmptyForm,FilledForm:()=>FilledForm,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Register_stories});__webpack_require__("./node_modules/react/index.js"),__webpack_require__("storybook/internal/preview-api"),__webpack_require__("storybook/internal/preview-errors"),__webpack_require__("@storybook/global");var es_form=__webpack_require__("./node_modules/antd/es/form/index.js"),input=__webpack_require__("./node_modules/antd/es/input/index.js"),es_button=__webpack_require__("./node_modules/antd/es/button/index.js"),sweetalert2_all=__webpack_require__("./node_modules/sweetalert2/dist/sweetalert2.all.js"),sweetalert2_all_default=__webpack_require__.n(sweetalert2_all),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const Register_Register=_ref=>{let{onRegisterSuccess}=_ref;const[form]=es_form.A.useForm();return(0,jsx_runtime.jsx)("div",{className:"auth-container",children:(0,jsx_runtime.jsxs)("div",{className:"auth-box",children:[(0,jsx_runtime.jsx)("h2",{children:"Register"}),(0,jsx_runtime.jsxs)(es_form.A,{form,onFinish:values=>{const existingUsers=JSON.parse(localStorage.getItem("users"))||[];if(existingUsers.some((user=>user.email===values.email)))sweetalert2_all_default().fire("Error","User already exists","error");else{const newUser={...values};localStorage.setItem("users",JSON.stringify([...existingUsers,newUser])),sweetalert2_all_default().fire("Success","Registration successful","success").then((()=>{onRegisterSuccess&&onRegisterSuccess()}))}},layout:"vertical",children:[(0,jsx_runtime.jsx)(es_form.A.Item,{label:"Name",name:"name",rules:[{required:!0,message:"Please input your name!"}],children:(0,jsx_runtime.jsx)(input.A,{})}),(0,jsx_runtime.jsx)(es_form.A.Item,{label:"Email",name:"email",rules:[{required:!0,message:"Please input your email!"}],children:(0,jsx_runtime.jsx)(input.A,{})}),(0,jsx_runtime.jsx)(es_form.A.Item,{label:"Password",name:"password",rules:[{required:!0,message:"Please input your password!"}],children:(0,jsx_runtime.jsx)(input.A.Password,{})}),(0,jsx_runtime.jsx)(es_button.Ay,{type:"primary",htmlType:"submit",children:"Register"}),(0,jsx_runtime.jsx)("div",{className:"extra-links",children:(0,jsx_runtime.jsx)("a",{href:"/",children:"Back to Login"})})]})]})})},Auth_Register=Register_Register;Register_Register.__docgenInfo={description:"",methods:[],displayName:"Register"};var dist=__webpack_require__("./node_modules/@storybook/test/dist/index.mjs");const Register_stories={component:Auth_Register,title:"Auth/Register"},EmptyForm={},FilledForm={play:async _ref=>{let{canvasElement}=_ref;const canvas=(0,dist.ux)(canvasElement);await dist.Q4.type(canvas.getByLabelText(/name/i),"John Doe"),await dist.Q4.type(canvas.getByLabelText(/email/i),"john.doe@example.com"),await dist.Q4.type(canvas.getByLabelText(/password/i),"secure-password"),await dist.Q4.click(canvas.getByRole("button",{name:/register/i})),await new Promise((r=>setTimeout(r,500))),await(0,dist.E3)(canvas.queryByText(/Registration successful/i)).toBeInTheDocument()}},__namedExportsOrder=["EmptyForm","FilledForm"];EmptyForm.parameters={...EmptyForm.parameters,docs:{...EmptyForm.parameters?.docs,source:{originalSource:"{}",...EmptyForm.parameters?.docs?.source}}},FilledForm.parameters={...FilledForm.parameters,docs:{...FilledForm.parameters?.docs,source:{originalSource:"{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Simulate interactions with the component\n    await userEvent.type(canvas.getByLabelText(/name/i), 'John Doe');\n    await userEvent.type(canvas.getByLabelText(/email/i), 'john.doe@example.com');\n    await userEvent.type(canvas.getByLabelText(/password/i), 'secure-password');\n\n    // Submit the form\n    await userEvent.click(canvas.getByRole('button', {\n      name: /register/i\n    }));\n\n    // Wait for async actions to complete\n    await new Promise(r => setTimeout(r, 500));\n\n    // Use a more flexible text matcher if the exact text is not found\n    await expect(canvas.queryByText(/Registration successful/i) // Use a regex or partial text match\n    ).toBeInTheDocument();\n  }\n}",...FilledForm.parameters?.docs?.source}}}}}]);