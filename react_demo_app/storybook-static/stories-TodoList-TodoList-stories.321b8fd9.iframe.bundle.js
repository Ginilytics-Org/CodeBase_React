(self.webpackChunkreact_demo_app=self.webpackChunkreact_demo_app||[]).push([[876],{"./src/stories/TodoList/TodoList.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AddingCategory:()=>AddingCategory,AddingTodo:()=>AddingTodo,Default:()=>Default,DeletingCategory:()=>DeletingCategory,DeletingTodo:()=>DeletingTodo,EditingCategory:()=>EditingCategory,EditingTodo:()=>EditingTodo,WithInitialData:()=>WithInitialData,__namedExportsOrder:()=>__namedExportsOrder,default:()=>TodoList_stories});var react=__webpack_require__("./node_modules/react/index.js"),dist=__webpack_require__("./node_modules/@storybook/testing-library/dist/index.mjs"),jest_dist=__webpack_require__("./node_modules/@storybook/jest/dist/index.mjs"),input=__webpack_require__("./node_modules/antd/es/input/index.js"),es_select=__webpack_require__("./node_modules/antd/es/select/index.js"),es_button=__webpack_require__("./node_modules/antd/es/button/index.js"),tag=__webpack_require__("./node_modules/antd/es/tag/index.js"),list=__webpack_require__("./node_modules/antd/es/list/index.js"),space=__webpack_require__("./node_modules/antd/es/space/index.js"),modal=__webpack_require__("./node_modules/antd/es/modal/index.js"),es_form=__webpack_require__("./node_modules/antd/es/form/index.js"),EditOutlined=__webpack_require__("./node_modules/@ant-design/icons/es/icons/EditOutlined.js"),DeleteOutlined=__webpack_require__("./node_modules/@ant-design/icons/es/icons/DeleteOutlined.js"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const{TextArea}=input.A,{Option}=es_select.A,TodoList_TodoList=()=>{const[todos,setTodos]=(0,react.useState)([]),[categories,setCategories]=(0,react.useState)([]),[newTodo,setNewTodo]=(0,react.useState)(""),[newCategory,setNewCategory]=(0,react.useState)(""),[selectedCategory,setSelectedCategory]=(0,react.useState)(""),[editTodoId,setEditTodoId]=(0,react.useState)(null),[editTodoText,setEditTodoText]=(0,react.useState)(""),[editingCategory,setEditingCategory]=(0,react.useState)(null),[newCategoryName,setNewCategoryName]=(0,react.useState)("");return(0,jsx_runtime.jsxs)("div",{className:"todo-list-container",children:[(0,jsx_runtime.jsxs)("div",{className:"todo-list-sidebar",children:[(0,jsx_runtime.jsxs)("div",{className:"todo-list-section",children:[(0,jsx_runtime.jsx)("h3",{children:"Categories"}),editingCategory?(0,jsx_runtime.jsxs)("div",{className:"category-edit",children:[(0,jsx_runtime.jsx)(input.A,{value:newCategoryName,onChange:e=>setNewCategoryName(e.target.value)}),(0,jsx_runtime.jsx)(es_button.Ay,{type:"primary",onClick:()=>{setCategories(categories.map((cat=>cat===editingCategory?newCategoryName:cat))),setEditingCategory(null),setNewCategoryName("")},children:"Save"}),(0,jsx_runtime.jsx)(es_button.Ay,{onClick:()=>setEditingCategory(null),children:"Cancel"})]}):(0,jsx_runtime.jsxs)("div",{className:"category-add",children:[(0,jsx_runtime.jsx)(input.A,{value:newCategory,onChange:e=>setNewCategory(e.target.value),placeholder:"Add a new category..."}),(0,jsx_runtime.jsx)(es_button.Ay,{type:"primary",onClick:()=>{newCategory.trim()&&!categories.includes(newCategory)&&(setCategories([...categories,newCategory]),setNewCategory(""))},style:{marginTop:"10px"},children:"Add Category"})]}),(0,jsx_runtime.jsx)("div",{className:"category-list",children:categories.map((category=>(0,jsx_runtime.jsxs)("div",{className:"category-item",children:[(0,jsx_runtime.jsx)(tag.A,{color:"default",children:category}),(0,jsx_runtime.jsx)(es_button.Ay,{icon:(0,jsx_runtime.jsx)(EditOutlined.A,{}),size:"small",onClick:()=>(category=>{setEditingCategory(category),setNewCategoryName(category)})(category)}),(0,jsx_runtime.jsx)(es_button.Ay,{icon:(0,jsx_runtime.jsx)(DeleteOutlined.A,{}),size:"small",onClick:()=>(category=>{setCategories(categories.filter((cat=>cat!==category))),setSelectedCategory(selectedCategory===category?"":selectedCategory)})(category)})]},category)))})]}),(0,jsx_runtime.jsxs)("div",{className:"todo-list-section",children:[(0,jsx_runtime.jsx)("h3",{children:"Todo History"}),(0,jsx_runtime.jsx)(list.A,{bordered:!0,dataSource:todos,renderItem:item=>(0,jsx_runtime.jsxs)(list.A.Item,{actions:[(0,jsx_runtime.jsx)(EditOutlined.A,{onClick:()=>(id=>{const todo=todos.find((todo=>todo.id===id));setEditTodoId(id),setEditTodoText(todo.text)})(item.id)},"edit"),(0,jsx_runtime.jsx)(DeleteOutlined.A,{onClick:()=>{return id=item.id,void setTodos(todos.filter((todo=>todo.id!==id)));var id}},"delete")],children:[(0,jsx_runtime.jsx)("div",{children:item.text}),item.category&&(0,jsx_runtime.jsx)(tag.A,{color:"blue",children:item.category})]})})]})]}),(0,jsx_runtime.jsxs)("div",{className:"todo-create-section",children:[(0,jsx_runtime.jsx)("h3",{children:"Create Todo"}),(0,jsx_runtime.jsx)(TextArea,{value:newTodo,onChange:e=>setNewTodo(e.target.value),rows:4,placeholder:"Add a new todo..."}),(0,jsx_runtime.jsxs)("div",{style:{marginTop:"10px"},children:[(0,jsx_runtime.jsx)("label",{children:"Select Category"}),(0,jsx_runtime.jsx)(es_select.A,{value:selectedCategory,onChange:value=>setSelectedCategory(value),placeholder:"Select a category",style:{width:"100%",marginTop:"5px"},children:categories.map((category=>(0,jsx_runtime.jsx)(Option,{value:category,children:category},category)))})]}),(0,jsx_runtime.jsxs)(space.A,{style:{marginTop:"10px"},children:[(0,jsx_runtime.jsx)(es_button.Ay,{type:"primary",onClick:()=>{newTodo.trim()&&selectedCategory&&(setTodos([...todos,{id:Date.now(),text:newTodo,category:selectedCategory}]),setNewTodo(""),setSelectedCategory(""))},children:"Add Todo"}),(0,jsx_runtime.jsx)(es_button.Ay,{type:"default",onClick:()=>setNewTodo(""),children:"Clear"})]})]}),(0,jsx_runtime.jsx)(modal.A,{title:"Edit Todo",open:null!==editTodoId,onOk:()=>{setTodos(todos.map((todo=>todo.id===editTodoId?{...todo,text:editTodoText}:todo))),setEditTodoId(null),setEditTodoText("")},onCancel:()=>setEditTodoId(null),children:(0,jsx_runtime.jsx)(es_form.A,{children:(0,jsx_runtime.jsx)(es_form.A.Item,{label:"Todo",children:(0,jsx_runtime.jsx)(input.A,{value:editTodoText,onChange:e=>setEditTodoText(e.target.value)})})})})]})},components_TodoList_TodoList=TodoList_TodoList;TodoList_TodoList.__docgenInfo={description:"",methods:[],displayName:"TodoList"};const TodoList_stories={component:components_TodoList_TodoList,title:"Pages/TodoList"},Default=()=>(0,jsx_runtime.jsx)(components_TodoList_TodoList,{}),WithInitialData=()=>(0,jsx_runtime.jsxs)("div",{style:{width:"600px"},children:[(0,jsx_runtime.jsx)(components_TodoList_TodoList,{}),(0,jsx_runtime.jsx)("script",{children:`\n          localStorage.setItem('todos', ${JSON.stringify([{id:1,text:"Buy groceries",category:"Personal"},{id:2,text:"Complete project report",category:"Work"}])});\n          localStorage.setItem('categories', ${JSON.stringify(["Personal","Work"])});\n        `})]}),AddingTodo={play:async _ref=>{let{canvasElement}=_ref;const canvas=(0,dist.ux)(canvasElement);await dist.Q4.type(canvas.getByPlaceholderText(/add a new category/i),"New Category"),await dist.Q4.click(canvas.getByText(/add category/i)),await dist.Q4.type(canvas.getByPlaceholderText(/add a new todo/i),"New Todo Item"),await dist.Q4.selectOptions(canvas.getByLabelText(/select category/i),"New Category"),await dist.Q4.click(canvas.getByText(/add todo/i)),await(0,jest_dist.E)(canvas.getByText("New Todo Item")).toBeInTheDocument(),await(0,jest_dist.E)(canvas.getByText("New Category")).toBeInTheDocument()}},EditingTodo={play:async _ref2=>{let{canvasElement}=_ref2;const canvas=(0,dist.ux)(canvasElement);await dist.Q4.type(canvas.getByPlaceholderText(/add a new todo/i),"Todo to Edit"),await dist.Q4.selectOptions(canvas.getByLabelText(/select category/i),"Personal"),await dist.Q4.click(canvas.getByText(/add todo/i));const editButton=canvas.getByRole("button",{name:/edit/i});await dist.Q4.click(editButton),await dist.Q4.clear(canvas.getByLabelText(/todo/i)),await dist.Q4.type(canvas.getByLabelText(/todo/i),"Updated Todo Text"),await dist.Q4.click(canvas.getByRole("button",{name:/save/i})),await(0,jest_dist.E)(canvas.getByText("Updated Todo Text")).toBeInTheDocument()}},DeletingTodo={play:async _ref3=>{let{canvasElement}=_ref3;const canvas=(0,dist.ux)(canvasElement);await dist.Q4.type(canvas.getByPlaceholderText(/add a new todo/i),"Todo to Delete"),await dist.Q4.selectOptions(canvas.getByLabelText(/select category/i),"Personal"),await dist.Q4.click(canvas.getByText(/add todo/i));const deleteButton=canvas.getByRole("button",{name:/delete/i});await dist.Q4.click(deleteButton),await(0,jest_dist.E)(canvas.queryByText("Todo to Delete")).not.toBeInTheDocument()}},AddingCategory={play:async _ref4=>{let{canvasElement}=_ref4;const canvas=(0,dist.ux)(canvasElement);await dist.Q4.type(canvas.getByPlaceholderText(/add a new category/i),"Work"),await dist.Q4.click(canvas.getByText(/add category/i)),await(0,jest_dist.E)(canvas.getByText("Work")).toBeInTheDocument()}},EditingCategory={play:async _ref5=>{let{canvasElement}=_ref5;const canvas=(0,dist.ux)(canvasElement);await dist.Q4.type(canvas.getByPlaceholderText(/add a new category/i),"Old Category"),await dist.Q4.click(canvas.getByText(/add category/i));const editButton=canvas.getByRole("button",{name:/edit/i});await dist.Q4.click(editButton),await dist.Q4.clear(canvas.getByLabelText(/category/i)),await dist.Q4.type(canvas.getByLabelText(/category/i),"Updated Category"),await dist.Q4.click(canvas.getByRole("button",{name:/save/i})),await(0,jest_dist.E)(canvas.getByText("Updated Category")).toBeInTheDocument()}},DeletingCategory={play:async _ref6=>{let{canvasElement}=_ref6;const canvas=(0,dist.ux)(canvasElement);await dist.Q4.type(canvas.getByPlaceholderText(/add a new category/i),"Category to Delete"),await dist.Q4.click(canvas.getByText(/add category/i));const deleteButton=canvas.getByRole("button",{name:/delete/i});await dist.Q4.click(deleteButton),await(0,jest_dist.E)(canvas.queryByText("Category to Delete")).not.toBeInTheDocument()}},__namedExportsOrder=["Default","WithInitialData","AddingTodo","EditingTodo","DeletingTodo","AddingCategory","EditingCategory","DeletingCategory"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"() => <TodoList />",...Default.parameters?.docs?.source}}},WithInitialData.parameters={...WithInitialData.parameters,docs:{...WithInitialData.parameters?.docs,source:{originalSource:"() => {\n  const initialTodos = [{\n    id: 1,\n    text: 'Buy groceries',\n    category: 'Personal'\n  }, {\n    id: 2,\n    text: 'Complete project report',\n    category: 'Work'\n  }];\n  const initialCategories = ['Personal', 'Work'];\n  return <div style={{\n    width: '600px'\n  }}>\r\n      <TodoList />\r\n      {/* Mock initial data */}\r\n      <script>\r\n        {`\n          localStorage.setItem('todos', ${JSON.stringify(initialTodos)});\n          localStorage.setItem('categories', ${JSON.stringify(initialCategories)});\n        `}\r\n      <\/script>\r\n    </div>;\n}",...WithInitialData.parameters?.docs?.source}}},AddingTodo.parameters={...AddingTodo.parameters,docs:{...AddingTodo.parameters?.docs,source:{originalSource:"{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Simulate adding a new category\n    await userEvent.type(canvas.getByPlaceholderText(/add a new category/i), 'New Category');\n    await userEvent.click(canvas.getByText(/add category/i));\n\n    // Simulate adding a new todo\n    await userEvent.type(canvas.getByPlaceholderText(/add a new todo/i), 'New Todo Item');\n    await userEvent.selectOptions(canvas.getByLabelText(/select category/i), 'New Category');\n    await userEvent.click(canvas.getByText(/add todo/i));\n\n    // Assert that the new todo appears in the list\n    await expect(canvas.getByText('New Todo Item')).toBeInTheDocument();\n    await expect(canvas.getByText('New Category')).toBeInTheDocument();\n  }\n}",...AddingTodo.parameters?.docs?.source}}},EditingTodo.parameters={...EditingTodo.parameters,docs:{...EditingTodo.parameters?.docs,source:{originalSource:"{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Add a todo item first\n    await userEvent.type(canvas.getByPlaceholderText(/add a new todo/i), 'Todo to Edit');\n    await userEvent.selectOptions(canvas.getByLabelText(/select category/i), 'Personal');\n    await userEvent.click(canvas.getByText(/add todo/i));\n\n    // Trigger edit modal\n    const editButton = canvas.getByRole('button', {\n      name: /edit/i\n    });\n    await userEvent.click(editButton);\n\n    // Edit the todo text\n    await userEvent.clear(canvas.getByLabelText(/todo/i));\n    await userEvent.type(canvas.getByLabelText(/todo/i), 'Updated Todo Text');\n    await userEvent.click(canvas.getByRole('button', {\n      name: /save/i\n    }));\n\n    // Assert that the updated text is shown in the todo list\n    await expect(canvas.getByText('Updated Todo Text')).toBeInTheDocument();\n  }\n}",...EditingTodo.parameters?.docs?.source}}},DeletingTodo.parameters={...DeletingTodo.parameters,docs:{...DeletingTodo.parameters?.docs,source:{originalSource:"{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Add a todo item first\n    await userEvent.type(canvas.getByPlaceholderText(/add a new todo/i), 'Todo to Delete');\n    await userEvent.selectOptions(canvas.getByLabelText(/select category/i), 'Personal');\n    await userEvent.click(canvas.getByText(/add todo/i));\n\n    // Delete the todo item\n    const deleteButton = canvas.getByRole('button', {\n      name: /delete/i\n    });\n    await userEvent.click(deleteButton);\n\n    // Assert that the todo item is no longer in the list\n    await expect(canvas.queryByText('Todo to Delete')).not.toBeInTheDocument();\n  }\n}",...DeletingTodo.parameters?.docs?.source}}},AddingCategory.parameters={...AddingCategory.parameters,docs:{...AddingCategory.parameters?.docs,source:{originalSource:"{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Simulate adding a new category\n    await userEvent.type(canvas.getByPlaceholderText(/add a new category/i), 'Work');\n    await userEvent.click(canvas.getByText(/add category/i));\n\n    // Assert that the new category appears in the category list\n    await expect(canvas.getByText('Work')).toBeInTheDocument();\n  }\n}",...AddingCategory.parameters?.docs?.source}}},EditingCategory.parameters={...EditingCategory.parameters,docs:{...EditingCategory.parameters?.docs,source:{originalSource:"{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Add a category first\n    await userEvent.type(canvas.getByPlaceholderText(/add a new category/i), 'Old Category');\n    await userEvent.click(canvas.getByText(/add category/i));\n\n    // Trigger edit category\n    const editButton = canvas.getByRole('button', {\n      name: /edit/i\n    });\n    await userEvent.click(editButton);\n\n    // Edit the category name\n    await userEvent.clear(canvas.getByLabelText(/category/i));\n    await userEvent.type(canvas.getByLabelText(/category/i), 'Updated Category');\n    await userEvent.click(canvas.getByRole('button', {\n      name: /save/i\n    }));\n\n    // Assert that the updated category name appears in the list\n    await expect(canvas.getByText('Updated Category')).toBeInTheDocument();\n  }\n}",...EditingCategory.parameters?.docs?.source}}},DeletingCategory.parameters={...DeletingCategory.parameters,docs:{...DeletingCategory.parameters?.docs,source:{originalSource:"{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Add a category first\n    await userEvent.type(canvas.getByPlaceholderText(/add a new category/i), 'Category to Delete');\n    await userEvent.click(canvas.getByText(/add category/i));\n\n    // Delete the category\n    const deleteButton = canvas.getByRole('button', {\n      name: /delete/i\n    });\n    await userEvent.click(deleteButton);\n\n    // Assert that the category is no longer in the list\n    await expect(canvas.queryByText('Category to Delete')).not.toBeInTheDocument();\n  }\n}",...DeletingCategory.parameters?.docs?.source}}}},"?4f7e":()=>{}}]);